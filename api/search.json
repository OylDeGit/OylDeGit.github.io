[{"id":"ad4f5193bdfc54e583fe238ffef546fa","title":"推荐的","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-02-11T03:24:31.902Z","categories_index":"","tags_index":"","author_index":"链桥"},{"id":"93fcfece537eb52bb032703811654297","title":"倍投","content":"综合渗透 - 社工库机器人项目开发进度🔥 总体进度: ■■■■■■■□□ 80%📊 开发进度更新\n✅ 0x012222222222  主菜单万能查询功能已完成(原默认模糊查询)\n🚫 0x02  猎魔功能(正在完善)\n✅ 0x03  主菜单手机号查询功能已完成\n✅ 0x04  主菜单身份证查询功能已完成\n✅ 0x05  主菜单QQ号查询功能已完成\n✅ 0x06  主菜单微博查询功能已完成\n✅ 0x07  数据库列表跳转按钮(可查看当前数据库列表)\n✅ 0x08  界面UI优化、自动检测手机号归属地、归属运营商\n✅ 0x09  上下翻页功能\n🚫 0x10  智能查询(正在开发)\n🚫 0x11  邮箱查询(正在开发)\n🚫 0x12  TG反诈中心(正在开发)\n🚫 0x13  个人中心(正在开发)\n✅ 0x14  获取用户UID功能\n\n🔱 数据补充(见TG已入库数据列表或点击此处)🏷 问题列表\n❓ 默认搜索结果不准确问题(正在完善)\n❓ 翻页后搜索结果不一致问题(正在完善)\n❓ /xxx 命令形式查询功能暂不开发(其他功能优先)\n✨ 欢迎各位股东们持续提供宝贵意见，进一步完善机器人的功能及其他方向\n✨ 希望各位大佬们继续推广和提供裤子\n\n✅ 已解决问题列表\n✨ 联系组织\n🎊 讨论群组: 电梯直达\n🎊 社工机器人: 电梯直达\n🎊 发布频道: 电梯直达\n\n","slug":"test4","date":"2021-09-30T15:32:04.000Z","categories_index":"玩法技巧","tags_index":"","author_index":"链桥"},{"id":"facc000dfb043244116199083f898dce","title":"娱乐","content":"内容： 娱乐网站介绍\n","slug":"test3","date":"2021-09-28T15:32:04.000Z","categories_index":"娱乐网站介绍","tags_index":"","author_index":"链桥"},{"id":"0313e750202f9c7b7862cfc3769049b3","title":"测试2","content":"软件血统\n","slug":"test2","date":"2021-09-27T15:32:04.000Z","categories_index":"软件学堂","tags_index":"","author_index":"链桥"},{"id":"ff294b41f6454d72b979d968dd4769d6","title":"测试","content":"上一部分我们完成了从 HTTP 发送 Request，到接收到 Response，并且把 Response 中的文本都解析出来。\n这一部分我们主要讲解如何做 HTML 解析 和 CSS 计算这两个部分。\n\n根据我们上部分列出的一个完整的浏览器架构的话，蓝色背景的部分就是我们目前已经完成的流程。\n\nHTML 解析HTML parse 模块的文件拆分思路：\n\n为了方便文件管理，我们把 parser 单独拆分到文件中\nparser 接收 HTML 文本作为参数，返回一棵 DOM 树\n\n加入 HTML Parser\n\n上一篇文章中我们最后获得了一个 Response 对象\n这里我们就考虑如何利用这个 Response 中的 body 内容\n所以我们应该从获得 Response 之后，把 body 内容传给 parser 中的 parseHTML 方法进行解析\n在真正的浏览器中，我们是应该逐段的传给 parser 处理，然后逐段的返回\n因为这里我们的目标只是简单实现浏览器工作的原理，所以我们只需要统一解析然后返回就好\n这样我们更容易理解，代码也更加清晰易懂\n\n\n\n\n\n\n\n\n\n\n文件：client.js\n// 这个是 client.js\n\n&#x2F;&#x2F; 1. 引入 parser.jsconst parser &#x3D; require(‘.&#x2F;parser.js’)\n&#x2F;&#x2F; …&#x2F;&#x2F;… 之前的代码在此处忽略&#x2F;&#x2F; …\nlet response &#x3D; await request.send()\n&#x2F;&#x2F; 2. 在 请求方法 中，获得 response 后加入 HTML 的解析代码let dom &#x3D; parser.parseHTML(response.body)Copy\n\n\n\n\n\n\n\n\n\n文件：parser.js\n/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nmodule.exports.parseHTML &#x3D; function (html) &#123;  console.log(html) &#x2F;&#x2F; 这里我们先 console.log 打印一下返回的 HTML 内容&#125;Copy\n用有效状态机 (FSM) 实现 HTML 的分析\n我们用 FSM 来实现 HTML 的分析\n在 HTML 标准中，已经规定了 HTML 的状态\n我们的浏览器只挑选其中一部分状态，完成一个最简版本\n\nHTML 标准里面已经把整个状态机中的状态都设计好了，我们直接就看 HTML 标准中给我们设计好的状态：https://html.spec.whatwg.org/multipage/，我们直接翻到 “Tokenization” 查看列出的状态，这里就是所有 HTML 的词法。\n有些同学在读这个标准的时候会说 “我看不懂”，“我太难了”，“我看懵了”。其实我们看不懂是因为这里面的标准是写给浏览器实现者去看的，但是用实现我们的浏览器的状态机之后，我们就可以看懂了，而且发现这里面写的非常像我们的代码。这个标准中写的就是伪代码。我们只需要把这里面的伪代码写成真实代码就可以了。\n在 HTML 中有 80 个状态，但是在我们这里，因为只需要走一遍浏览器工作的流程，我们就不一一实现了，我们在其中挑选一部分来实现即可。\n下面我们来初始化一下我们的 parseHTML 的状态机：（把上面的 parser.js 的基础上进行修改）\n\n\n\n\n\n\n\n\n\n文件：parser.js\n/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nconst EOF &#x3D; Symbol(‘EOF’) &#x2F;&#x2F; EOF: end of file\nfunction data(char) &#123;&#125;\n&#x2F;**\n\nHTTP 解析\n@param &#123;string&#125; html 文本 *&#x2F;module.exports.parseHTML &#x3D; function (html) &#123;  let state &#x3D; data  for (let char of html) &#123; state &#x3D; state(char)  &#125;  state &#x3D; state(EOF)&#125;Copy\n\n\n\n\n\n\n\n\n\n\n\n上面的代码中用了一个小技巧，因为 HTML 最后是有一个文件终结的\n所有最后需要给他一个结束字符（重点是这里用一个没有特别意义的字符）\n我们这里使用了 Symbol 创建了一个 EOF 字符，代表 End of file (文件结束)\n\n解析标签HTML 有三种标签\n\n开始标签\n结束标签\n自封闭标签\n\n思路：\n\n主要的标签有：开始标签，结束标签和自封闭标签\n在这一步我们暂时忽略属性\n\n\n\n\n\n\n\n\n\n\n文件：parser.js\n/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nconst EOF &#x3D; Symbol(‘EOF’) &#x2F;&#x2F; EOF: end of file\n&#x2F;**\n\nHTML 数据开始阅读状态\n\n\n\n如果找到 &amp;lt; 就是标签开始状态\n\n\n\n如果找到 EOF 就是HTML文本结束\n\n\n\n其他字符就继续寻找\n\n\n@param {*} char\n\n@return {function} *&#x2F;function data(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&lt;’) { &#x2F;&#x2F; 标签开始 return tagOpen  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 文本结束 return  } else { return data  }}\n\n&#x2F;**\n\n标签开始状态\n\n\n\n如果找到 / 证明是自关闭标签\n\n\n\n如果是字母就是标签名\n\n\n\n其他字符就直接继续寻找\n\n\n@param {*} char *&#x2F;function tagOpen(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { &#x2F;&#x2F; 自关闭标签 return endTagOpen  } else if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { &#x2F;&#x2F; 标签名 return tagName(char)  } else { return  }}\n\n&#x2F;**\n\n标签结束状态\n\n\n\n如果是字母就是标签名\n\n\n\n如果直接是 &amp;gt; 就报错\n\n\n\n如果是结束符合，也是报错\n\n\n@param {*} char *&#x2F;function endTagOpen(char) {  if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { return tagName(char)  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { &#x2F;&#x2F; 报错 —— 没有结束标签  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 报错 —— 结束标签不合法  }}\n\n&#x2F;**\n\n标签名状态\n\n\n\n如果 \\t(Tab符)、\\n(空格符)、\\f(禁止符)或者是空格，这里就是属性的开始\n\n\n\n如果找到 / 就是自关闭标签\n\n\n\n如果是字母字符那还是标签名\n\n\n\n如果是 &amp;gt; 就是开始标签结束\n\n\n\n其他就是继续寻找标签名\n\n\n@param {*} char *&#x2F;function tagName(char) {  if (c.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (c.match(&#x2F;^[a-zA-Z]$&#x2F;)) { return tagName  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { return data  } else { return tagName  }}\n\n&#x2F;**\n\n标签属性状态\n\n\n\n如果遇到 / 就是自封闭标签状态\n\n\n\n如果遇到字母就是属性名\n\n\n\n如果遇到 &amp;gt; 就是标签结束\n\n\n\n如果遇到 = 下来就是属性值\n\n\n\n其他情况继续进入属性抓取\n\n\n@param {*} char *&#x2F;function beforeAttributeName(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { return data  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x3D;’) { return beforeAttributeName  } else { return beforeAttributeName  }}\n\n&#x2F;**\n\n自封闭标签状态\n\n\n\n如果遇到 &amp;gt; 就是自封闭标签结束\n\n\n\n如果遇到 EOF 即使报错\n\n\n\n其他字符也是报错\n\n\n@param {*} char *&#x2F;function selfClosingStartTag(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { return data  } else if (char &#x3D;&#x3D;&#x3D; ‘EOF’) {  } else {  }}\n\n&#x2F;**\n\nHTTP 解析\n@param {string} html 文本 *&#x2F;module.exports.parseHTML &#x3D; function (html) {  let state &#x3D; data  for (let char of html) { state &#x3D; state(char)  }  state &#x3D; state(EOF)}Copy\n\n创建元素\n在状态机中，除了状态迁移，我们还会加入业务逻辑\n我们在标签结束状态提交标签 token\n\n业务逻辑：\n\n首先我们需要建立一个 currentToken 来暂存当前的 Token（这里我们是用于存放开始和结束标签 token 的）\n然后建立一个 emit() 方法来接收最后创建完毕的 Token（这里后面会用逐个 Token 来创建 DOM 树）\nHTML 数据开始状态 —— data\n如果找到的是 EOF，那就直接 emit 一个 type: ‘EOF’ 的 Token\n如果是文本内容的话，直接 emit &#123;type: 'text', content: char&#125; 的 token\n\n\n标签开始状态 —— tagOpen\n如果匹配中的是字母，那就是开始标签\n直接记录开始标签 Token 对象 &#123;type: 'startTag, tagName: ''&#125;\n在 tagName() 状态中我们会把整个完整的标签名拼接好\n\n\n标签结束状态 —— endTagOpen\n如果匹配到字符，那就是结束标签名\n直接记录结束标签 Token 对象 &#123;type: 'endTag', tagName: ''&#125;\n雷同，后面会在 tagName() 状态中我们会把整个完整的标签名拼接好\n\n\n标签名状态 —— tagName\n这里就是最核心的业务区了\n在第三种情况下，匹配到字母时，那就是需要拼接标签名的时候\n这里我们直接给 currentTag 追加字母即可\n当我们匹配到 &gt; 字符时，就是这个标签结束的时候，这个时候我们已经拥有一个完整的标签 Token 了\n所以这里我们直接把 currentToken emit 出去\n\n\n标签属性状态 —— beforeAttributeName\n在匹配到 &gt; 字符的时候，这里就是标签结束的时候，所以可以 emit currentToken 的时候\n\n\n自封闭标签状态 —— selfClosingStartTag\n这里追加了一个逻辑\n在匹配到 &gt; 字符时，就是自闭标签结束的时候\n这里我们直接给 currentToken 追加一个 isSelfClosing = true 的状态\n然后直接可以把 currentToken emit 出去了\n\n\n\n\n\n\n\n\n\n\n\n\n文件：parser.js\n/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nlet currentToken &#x3D; null\n&#x2F;**\n\n输出 HTML token\n@param &#123;*&#125; token *&#x2F;function emit(token) &#123;  console.log(token)&#125;\n\nconst EOF &#x3D; Symbol(‘EOF’) &#x2F;&#x2F; EOF: end of file\n&#x2F;**\n\nHTML 数据开始阅读状态\n\n\n\n如果找到 &amp;lt; 就是标签开始状态\n\n\n\n如果找到 EOF 就是HTML文本结束\n\n\n\n其他字符就继续寻找\n\n\n@param {*} char\n\n@return {function} *&#x2F;function data(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&lt;’) { &#x2F;&#x2F; 标签开始 return tagOpen  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 文本结束 emit({   type: ‘EOF’, }) return  } else { &#x2F;&#x2F; 文本 emit({   type: ‘text’,   content: char, }) return data  }}\n\n&#x2F;**\n\n标签开始状态\n\n\n\n如果找到 / 证明是自关闭标签\n\n\n\n如果是字母就是标签名\n\n\n\n其他字符就直接继续寻找\n\n\n@param {*} char *&#x2F;function tagOpen(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { &#x2F;&#x2F; 自关闭标签 return endTagOpen  } else if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { &#x2F;&#x2F; 标签名 currentToken &#x3D; {   type: ‘startTag’,   tagName: ‘’, } return tagName(char)  } else { return  }}\n\n&#x2F;**\n\n标签结束状态\n\n\n\n如果是字母就是标签名\n\n\n\n如果直接是 &amp;gt; 就报错\n\n\n\n如果是结束符合，也是报错\n\n\n@param {*} char *&#x2F;function endTagOpen(char) {  if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { currentToken &#x3D; {   type: ‘endTag’,   tagName: ‘’, } return tagName(char)  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { &#x2F;&#x2F; 报错 —— 没有结束标签  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 报错 —— 结束标签不合法  }}\n\n&#x2F;**\n\n标签名状态\n\n\n\n如果 \\t(Tab符)、\\n(空格符)、\\f(禁止符)或者是空格，这里就是属性的开始\n\n\n\n如果找到 / 就是自关闭标签\n\n\n\n如果是字母字符那还是标签名\n\n\n\n如果是 &amp;gt; 就是开始标签结束\n\n\n\n其他就是继续寻找标签名\n\n\n@param {*} char *&#x2F;function tagName(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { currentToken.tagName +&#x3D; char return tagName  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { emit(currentToken) return data  } else { return tagName  }}\n\n&#x2F;**\n\n标签属性状态\n\n\n\n如果遇到 / 就是自封闭标签状态\n\n\n\n如果遇到字母就是属性名\n\n\n\n如果遇到 &amp;gt; 就是标签结束\n\n\n\n如果遇到 = 下来就是属性值\n\n\n\n其他情况继续进入属性抓取\n\n\n@param {*} char *&#x2F;function beforeAttributeName(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x3D;’) { return beforeAttributeName  } else { return beforeAttributeName  }}\n\n&#x2F;**\n\n自封闭标签状态\n\n\n\n如果遇到 &amp;gt; 就是自封闭标签结束\n\n\n\n如果遇到 EOF 即使报错\n\n\n\n其他字符也是报错\n\n\n@param {*} char *&#x2F;function selfClosingStartTag(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { currentToken.isSelfClosing &#x3D; true emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; ‘EOF’) {  } else {  }}\n\n&#x2F;**\n\nHTTP 解析\n@param {string} html 文本 *&#x2F;module.exports.parseHTML &#x3D; function (html) {  let state &#x3D; data  for (let char of html) { state &#x3D; state(char)  }  state &#x3D; state(EOF)}Copy\n\n处理属性\n属性值分为单引号、双引号、无引号三种写法，因此需要较多状态处理\n处理属性的方式跟标签类似\n属性结束时，我们把属性加到标签 Token 上\n\n业务逻辑：\n\n首先我们需要定义一个 currentAttribute 来存放当前找到的属性\n然后在里面叠加属性的名字和属性值，都完成后再放入 currrentToken 之中\n标签属性名开始状态 —— beforeAttributeName\n这里如果遇到 空格，换行，回车等字符就可以再次进入标签属性名开始状态，继续等待属性的字符\n如果我们遇到 /或者&gt;就是标签直接结束了，我们就可以进入属性结束状态\n如果遇到 = 或者 EOF 这里就有 HTML 语法错误，正常来说就会返回 parse error\n其他情况的话，就是刚刚开始属性名，这里就可以创建新的 currentAttribute 对象 &#123;name: '', value: ''&#125;，然后返回属性名状态\n\n\n属性名状态 —— attributeName\n如果我们遇到空格、换行、回车、/、&gt; 或者是 EOF等字符时，就可以判定这个属性已经结束了，可以直接迁移到 afterAttributeName 状态\n如果我们遇到一个 = 字符，证明我们的属性名读取完毕，下来就是属性值了\n如果我们遇到 \\u0000 那就是解析错误，直接抛出 Parse error\n最后所有其他的都是当前属性名的字符，直接叠加到 currentAttribute 的 name 值中，然后继续进入属性名状态继续读取属性名字符\n\n\n属性值开始状态 —— beforeAttributeValue\n如果我们遇到空格、换行、回车、/、&gt; 或者是 EOF等字符时，我们继续往后寻找属性值，所以继续返回 beforeAttributeValue 状态\n如果遇到 \" 就是双引号属性值，进入 doubleQuotedAttributeValue\n如果遇到 ' 就是单引号属性值，进入 singleQuotedAttributeValue\n其他情况就是遇到没有引号的属性值，使用 reconsume 的技巧进入 unquotedAttributeValue(char)\n\n\n双引号属性值状态 – doubleQuotedAttributeValue\n这里我们死等 \" 字符，到达这个字符证明这个属性的名和值都读取完毕，可以直接把这两个值放入当前 Token 了\n如果遇到 \\u0000 或者 EOF 就是 HTML 语法错误，直接抛出 Parse error\n其他情况就是继续读取属性值，并且叠加到 currentAttribute 的 value 中，然后继续进入 doubleQuotedAttributeValue\n\n\n单引号属性值状态 —— singleQuotedAttributeValue\n与双引号雷同，这里我们死等 ' 字符，到达这个字符证明这个属性的名和值都读取完毕，可以直接把这两个值放入当前 Token 了\n如果遇到 \\u0000 或者 EOF 就是 HTML 语法错误，直接抛出 Parse error\n其他情况就是继续读取属性值，并且叠加到 currentAttribute 的 value 中，然后继续进入 singleQuotedAttributeValue\n\n\n引号结束状态 —— afterQuotedAttributeValue\n如果我们遇到空格、换行、回车等字符时，证明还有可能有属性值，所以我们迁移到 beforeAttributeName 状态\n这个时候遇到一个 / 字符，因为之前我们读的是属性，属性都是在开始标签中的，在开始标签遇到 / ，那肯定是自封闭标签了。所以这里直接迁移到 selfClosingStartTag 状态\n如果遇到 &gt; 字符，证明标签要结束了，直接把当前组装好的属性名和值加入 currentToken， 然后直接 emit 出去\n如果遇到 EOF 那就是 HTML 语法错误，抛出 Parse error\n其他情况按照浏览器规范，这里属于属性之间缺少空格的解析错误 (Parse error: missing-whitespace-between-attributes)\n\n\n无引号属性值状态 —— unquotedAttributeValue\n如果我们遇到空格、换行、回车等字符时，证明属性值结束，这个时候我们就可以直接把当前属性加入 currentToken，然后还有可能有其他属性，所以进入 beforeAttributeName 状态\n如果遇到 / 证明标签是一个自封闭标签，先把当前属性加入 currentToken 然后进入 selfClosingStartTag 状态\n如果遇到 &gt; 证明标签正常结束了，先把当前属性加入 currentToken 然后直接 emit token\n遇到其他不合法字符都直接抛出 Parse error\n其他情况就是还在读取属性值的字符，所以叠加当前字符到属性值中，然后继续回到 unquotedAttributeValue\n\n\n属性名结束状态 —— afterAttributeName\n如果我们遇到空格、换行、回车等字符时，证明还没有找到结束字符，继续寻找，所以重新进入 afterAttributeName\n如果遇到 / 证明这个标签是自封闭标签，直接迁移到 selfClosingStartTag 状态\n如果遇到 = 字符证明下一个字符开始就是属性值了，迁移到 beforeAttributeValue 状态\n如果遇到 &gt; 字符，证明标签正常结束了，先把当前属性加入 currentToken 然后直接 emit token\n如果遇到 EOF 证明 HTML 文本异常结束了，直接抛出 Parse error\n其他情况下，属于属性名又开始了，所以把上一个属性加入 currentToken 然后继续记录下一个属性\n\n\n\n\n\n\n\n\n\n\n\n\n文件名：parser.js\n/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nlet currentToken &#x3D; nulllet currentAttribute &#x3D; null\n&#x2F;**\n\n输出 HTML token\n@param &#123;*&#125; token *&#x2F;function emit(token) &#123;  console.log(token)&#125;\n\nconst EOF &#x3D; Symbol(‘EOF’) &#x2F;&#x2F; EOF: end of file\n&#x2F;**\n\nHTML 数据开始阅读状态\n\n\n\n如果找到 &amp;lt; 就是标签开始状态\n\n\n\n如果找到 EOF 就是HTML文本结束\n\n\n\n其他字符就继续寻找\n\n\n@param {*} char\n\n@return {function} *&#x2F;function data(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&lt;’) { &#x2F;&#x2F; 标签开始 return tagOpen  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 文本结束 emit({   type: ‘EOF’, }) return  } else { &#x2F;&#x2F; 文本 emit({   type: ‘text’,   content: char, }) return data  }}\n\n&#x2F;**\n\n标签开始状态\n\n\n\n如果找到 / 证明是自关闭标签\n\n\n\n如果是字母就是标签名\n\n\n\n其他字符就直接继续寻找\n\n\n@param {*} char *&#x2F;function tagOpen(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { &#x2F;&#x2F; 自关闭标签 return endTagOpen  } else if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { &#x2F;&#x2F; 标签名 currentToken &#x3D; {   type: ‘startTag’,   tagName: ‘’, } return tagName(char)  } else { return  }}\n\n&#x2F;**\n\n标签结束状态\n\n\n\n如果是字母就是标签名\n\n\n\n如果直接是 &amp;gt; 就报错\n\n\n\n如果是结束符合，也是报错\n\n\n@param {*} char *&#x2F;function endTagOpen(char) {  if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { currentToken &#x3D; {   type: ‘endTag’,   tagName: ‘’, } return tagName(char)  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { &#x2F;&#x2F; 报错 —— 没有结束标签  } else if (char &#x3D;&#x3D;&#x3D; EOF) { &#x2F;&#x2F; 报错 —— 结束标签不合法  }}\n\n&#x2F;**\n\n标签名状态\n\n\n\n如果 \\t(Tab符)、\\n(空格符)、\\f(禁止符)或者是空格，这里就是属性的开始\n\n\n\n如果找到 / 就是自关闭标签\n\n\n\n如果是字母字符那还是标签名\n\n\n\n如果是 &amp;gt; 就是开始标签结束\n\n\n\n其他就是继续寻找标签名\n\n\n@param {*} char *&#x2F;function tagName(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char.match(&#x2F;^[a-zA-Z]$&#x2F;)) { currentToken.tagName +&#x3D; char return tagName  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { emit(currentToken) return data  } else { return tagName  }}\n\n&#x2F;**\n\n标签属性名开始状态\n\n\n\n如果遇到 / 就是自封闭标签状态\n\n\n\n如果遇到字母就是属性名\n\n\n\n如果遇到 &amp;gt; 就是标签结束\n\n\n\n如果遇到 = 下来就是属性值\n\n\n\n其他情况继续进入属性抓取\n\n\n@param {*} char *&#x2F;function beforeAttributeName(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘ || char &#x3D;&#x3D;&#x3D; ‘&gt;’) { return afterAttributeName(char)  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x3D;’ || char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error’)  } else { currentAttribute &#x3D; {   name: ‘’,   value: ‘’, } return attributeName(char)  }}\n\n&#x2F;**\n\n属性名状态\n@param {*} char *&#x2F;function attributeName(char) {  if ( char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;) || char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘ || char &#x3D;&#x3D;&#x3D; ‘&gt;’ || char &#x3D;&#x3D;&#x3D; EOF  ) { return afterAttributeName(char)  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x3D;’) { return beforeAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘\\u0000’) { throw new Error(‘Parse error’)  } else { currentAttribute.name +&#x3D; char return attributeName  }}\n\n&#x2F;**\n\n属性值开始状态\n@param {*} char *&#x2F;function beforeAttributeValue(char) {  if ( char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;) || char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘ || char &#x3D;&#x3D;&#x3D; ‘&gt;’ || char &#x3D;&#x3D;&#x3D; EOF  ) { return beforeAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘“‘) { return doubleQuotedAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; “‘“) { return singleQuotedAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { &#x2F;&#x2F; return data;  } else { return unquotedAttributeValue(char)  }}\n\n&#x2F;**\n\n双引号属性值状态\n@param {*} char *&#x2F;function doubleQuotedAttributeValue(char) {  if (char &#x3D;&#x3D;&#x3D; ‘“‘) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value return afterQuotedAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘\\u0000’) { throw new Error(‘Parse error’)  } else if (char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error’)  } else { currentAttribute.value +&#x3D; char return doubleQuotedAttributeValue  }}\n\n&#x2F;**\n\n单引号属性值状态\n@param {*} char *&#x2F;function singleQuotedAttributeValue(char) {  if (char &#x3D;&#x3D;&#x3D; “‘“) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value return afterQuotedAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘\\u0000’) { throw new Error(‘Parse error’)  } else if (char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error’)  } else { currentAttribute.value +&#x3D; char return singleQuotedAttributeValue  }}\n\n&#x2F;**\n\n引号结束状态\n@param {*} char *&#x2F;function afterQuotedAttributeValue(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error: eof-in-tag’)  } else { throw new Error(‘Parse error: missing-whitespace-between-attributes’)  }}\n\n&#x2F;**\n\n无引号属性值状态\n@param {*} char *&#x2F;function unquotedAttributeValue(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value return beforeAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value return selfClosingStartTag  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; ‘\\u0000’) { throw new Error(‘Parse error’)  } else if ( char &#x3D;&#x3D;&#x3D; ‘“‘ || char &#x3D;&#x3D;&#x3D; “‘“ || char &#x3D;&#x3D;&#x3D; ‘&lt;’ || char &#x3D;&#x3D;&#x3D; ‘&#x3D;’ || char &#x3D;&#x3D;&#x3D; ‘&#96;’  ) { throw new Error(‘Parse error’)  } else if (char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error’)  } else { currentAttribute.value +&#x3D; char return unquotedAttributeValue  }}\n\n&#x2F;**\n\n属性名结束状态\n@param {*} char *&#x2F;function afterAttributeName(char) {  if (char.match(&#x2F;^[\\t\\n\\f ]$&#x2F;)) { return afterAttributeName  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x2F;‘) { return selfClosingStartTag  } else if (char &#x3D;&#x3D;&#x3D; ‘&#x3D;’) { return beforeAttributeValue  } else if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { currentToken[currentAttribute.name] &#x3D; currentAttribute.value emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; EOF) { throw new Error(‘Parse error’)  } else { currentToken[currentAttribute.name] &#x3D; currentAttribute.value currentAttribute &#x3D; {   name: ‘’,   value: ‘’, } return attributeName(char)  }}\n\n&#x2F;**\n\n自封闭标签状态\n\n\n\n如果遇到 &amp;gt; 就是自封闭标签结束\n\n\n\n如果遇到 EOF 即使报错\n\n\n\n其他字符也是报错\n\n\n@param {*} char *&#x2F;function selfClosingStartTag(char) {  if (char &#x3D;&#x3D;&#x3D; ‘&gt;’) { currentToken.isSelfClosing &#x3D; true emit(currentToken) return data  } else if (char &#x3D;&#x3D;&#x3D; ‘EOF’) {  } else {  }}\n\n&#x2F;**\n\nHTTP 解析\n@param {string} html 文本 *&#x2F;module.exports.parseHTML &#x3D; function (html) {  let state &#x3D; data  for (let char of html) { state &#x3D; state(char)  }  state &#x3D; state(EOF)}Copy\n\n用 token 构建 DOM 树这里我们开始语法分析，这个与复杂的 JavaScript 的语法相比就非常简单，所以我们只需要用栈基于可以完成分析。但是如果我们要做一个完整的浏览器，只用栈肯定是不行的，因为浏览器是有容错性的，如果我们没有编写结束标签的话，浏览器是会去为我们补错机制的。\n那么我做的这个简单的浏览器就不需要对使用者做的那么友好，而只对实现者做的更友好即可。所以我们在实现的过程中就不做那么多特殊情况的处理了。简单用一个栈实现浏览器的 HTML 语法解析，并且构建 一个 DOM 树。\n\n从标签构建 DOM 树的基本技巧是使用栈\n遇到开始标签时创建元素并入栈，遇到结束标签时出栈\n自封闭节点可视为入栈后立刻出栈\n任何元素的父元素是它入栈前的栈顶\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中的 emit() 函数部分\n// 默认给予根节点 document\nlet stack = [&#123; type: 'document', children: [] &#125;]\n\n&#x2F;**\n\n输出 HTML token\n@param &#123;*&#125; token *&#x2F;function emit(token) &#123;  if (token.type &#x3D;&#x3D;&#x3D; ‘text’) return\n\n  &#x2F;&#x2F; 记录上一个元素 - 栈顶  let top &#x3D; stack[stack.length - 1]\n  &#x2F;&#x2F; 如果是开始标签  if (token.type &#x3D;&#x3D; ‘startTag’) &#123;    let element &#x3D; &#123;      type: ‘element’,      children: [],      attributes: [],    &#125;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName\n\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prop &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; prop &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tagName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; prop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n      value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token comment&quot;&gt;// 对偶操作&lt;/span&gt;\ntop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isSelfClosing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  } else if (token.type &#x3D;&#x3D; ‘endTag’) {    if (top.tagName !&#x3D;&#x3D; token.tagName) {      throw new Error(‘Parse error: Tag start end not matched’)    } else {      stack.pop()    }\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  }}Copy\n将文本节点加到 DOM 树这里是 HTML 解析的最后一步，把文本节点合并后加入 DOM 树里面。\n\n文本节点与自封闭标签处理类似\n多个文本节点需要合并\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中的 emit() 函数部分\nlet currentToken = null\nlet currentAttribute = null\nlet currentTextNode = null\n\n&#x2F;&#x2F; 默认给予根节点 documentlet stack &#x3D; [&#123; type: ‘document’, children: [] &#125;]\n&#x2F;**\n\n输出 HTML token\n@param &#123;*&#125; token *&#x2F;function emit(token) &#123;  &#x2F;&#x2F; 记录上一个元素 - 栈顶  let top &#x3D; stack[stack.length - 1]\n\n  &#x2F;&#x2F; 如果是开始标签  if (token.type &#x3D;&#x3D; ‘startTag’) &#123;    let element &#x3D; &#123;      type: ‘element’,      children: [],      attributes: [],    &#125;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName\n\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prop &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; prop &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tagName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; prop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n      value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token comment&quot;&gt;// 对偶操作&lt;/span&gt;\ntop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isSelfClosing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  } else if (token.type &#x3D;&#x3D; ‘endTag’) {    if (top.tagName !&#x3D;&#x3D; token.tagName) {      throw new Error(‘Parse error: Tag start end not matched’)    } else {      stack.pop()    }\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  } else if (token.type &#x3D;&#x3D;&#x3D; ‘text’) {    if (currentTextNode &#x3D;&#x3D;&#x3D; null) {      currentTextNode &#x3D; {        type: ‘text’,        content: ‘’,      }      top.children.push(currentTextNode)    }\ncurrentTextNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content\n\n  }}Copy\n\nCSS 计算完成 HTML 解析并且获得了我们的 DOM 树之后，我们可以通过 CSS 计算来生成带 CSS 的 DOM 树。CSS Computing 表示的就是我们 CSS 规则里面所包含的那些 CSS 属性，应用到匹配这些选择器的元素上。\n开始这个代码编写之前，我们先来看看 z 在整个浏览器工作流程中，我们完成了哪些流程，到达了哪里。\n\n上面的图，我们看到 蓝色 部分就是已经完成的：\n\n上一篇文章我们完成了 HTTP 请求\n然后通过获得的报文，解析出所有 HTTP 信息，里面就包括了 HTML 内容\n然后通过 HTTP 内容解析，我们构建了我们的 DOM 树\n接下来就是 CSS 计算 (CSS Computing)\n\n目前的 DOM 树只有我们的 HTML 语言里面描述的那些语义信息，我们像完成渲染，我们需要 CSS 信息。 那有的同学就会说我们把所有的样式写到 style 里面可不可以呢？如果我们这样写呢，我们就不需要经历这个 CSS 计算的过程了。但是虽然我们只是做一个虚拟的浏览器，但是还是希望呈现一个比较完成的浏览器流程，所以我们还是会让 DOM 树参与 CSS 计算的过程。\n所以这里我们就让 DOM 树挂上 CSS 信息，然后在渲染的过程中能使用。\n在编写这个代码之前，我们需要准备一个环境。如果我们需要做 CSS 计算，我们就需要对 CSS 的语法与词法进行分析。然后这个过程如果是手动来实现的话，是需要较多的编译原理基础知识的，但是这些编译基础知识的深度对我们知识想了解浏览器工作原理并不是重点。所以这里我们就偷个懒，直接用 npm 上的一个css现成包即可。\n其实这个 css 包，就是一个 CSS parser，可以帮助我们完成 CSS 代码转译成 AST 抽象语法树。 我们所要做的就是根据这棵抽象语法树抽出各种 CSS 规则，并且把他们运用到我们的 HTML 元素上。\n那么我们第一步就是先拿到 CSS 的规则，所以叫做 “收集 CSS 规则”\n收集 CSS 规则\n遇到 style 标签时，我们把 CSS 规则保存起来\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中的 emit() 函数\n\n我们在 tagName === ‘endTag’ 的判断中加入了判断当前标签是否 style 标签\n如果是，我们就可以获取 style 标签里面所有的内容进行 CSS 分析\n这里非常简单我们加入一个 addCSSRule(top.children[0].content)的函数即可\n而，top 就是当前元素，children[0] 就是 text 元素，而 .content 就是所有的 CSS 规则文本\n这里我们需要注意一个点，我们忽略了在实际情况中还有 link 标签引入 CSS 文件的情况。但是这个过程涉及到多层异步请求和 HTML 解析的过程，为了简化我们的代码的复杂度，这里就不做这个实现了。当然实际的浏览器是会比我们做的虚拟浏览器复杂的多。\n\n/**\n * 输出 HTML token\n * @param &#123;*&#125; token\n */\nfunction emit(token) &#123;\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  &#x2F;&#x2F; 如果是开始标签  if (token.type &#x3D;&#x3D; ‘startTag’) &#123;    &#x2F;&#x2F; …………. 省略了这部分代码 …………………  &#125; else if (token.type &#x3D;&#x3D; ‘endTag’) &#123;    &#x2F;&#x2F; 校验开始标签是否被结束    &#x2F;&#x2F; 不是：直接抛出错误，是：直接出栈    if (top.tagName !&#x3D;&#x3D; token.tagName) &#123;      throw new Error(‘Parse error: Tag start end not matched’)    &#125; else &#123;      &#x2F;&#x2F; 遇到 style 标签时，执行添加 CSS 规则的操作      if (top.tagName &#x3D;&#x3D;&#x3D; ‘style’) &#123;        addCSSRule(top.children[0].content)      &#125;      stack.pop()    &#125;\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  } else if (token.type &#x3D;&#x3D;&#x3D; ‘text’) {    &#x2F;&#x2F; …………. 省略了这部分代码 …………………  }}Copy\n\n这里我们调用 CSS Parser 来分析 CSS 规则\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中加入 addCSSRule() 函数\n\n首先我们需要通过 node 引入 css 包\n然后调用 css.parse(text) 获得 AST 抽象语法树\n最后通过使用 ... 的特性展开了 ast.stylesheet.rules 中的所有对象，并且加入到 rules 里面\n\nconst css = require('css')\n\nlet rules &#x3D; []&#x2F;**\n\n把 CSS 规则暂存到一个数字里\n@param &#123;*&#125; text *&#x2F;function addCSSRule(text) &#123;  var ast &#x3D; css.parse(text)  console.log(JSON.stringify(ast, null, ‘    ‘))  rules.push(…ast.stylesheet.rules)&#125;Copy\n\n\n这里我们必须要仔细研究此库分析 CSS 规则的格式\n\n最终 AST 输出的结果：\n\ntype 类型是 stylesheet 样式表\n然后在 stylesheet 中有 rules 的 CSS 规则数组\nrules 数组中就有一个 declarations 数组，这里面就是我们 CSS 样式的信息了\n拿第一个 delarations 来说明，他的属性为 width， 属性值为 100px，这些就是我们需要的 CSS 规则了\n\n&#123;\n  \"type\": \"stylesheet\",\n  \"stylesheet\": &#123;\n    \"source\": undefined,\n    \"rules\": [\n      &#123;\n        \"type\": \"rule\",\n        \"selectors\": [\"body div #myId\"],\n        \"declarations\": [\n          &#123;\n            \"type\": \"declaration\",\n            \"property\": \"width\",\n            \"value\": \"100px\",\n            \"position\": &#123;\n              \"start\": &#123;\n                \"line\": 3,\n                \"column\": 9\n              &#125;,\n              \"end\": &#123;\n                \"line\": 3,\n                \"column\": 21\n              &#125;,\n              \"source\": undefined\n            &#125;\n          &#125;,\n          &#123;\n            \"type\": \"declaration\",\n            \"property\": \"background-color\",\n            \"value\": \"#ff5000\",\n            \"position\": &#123;\n              \"start\": &#123;\n                \"line\": 4,\n                \"column\": 9\n              &#125;,\n              \"end\": &#123;\n                \"line\": 4,\n                \"column\": 34\n              &#125;,\n              \"source\": undefined\n            &#125;\n          &#125;\n        ],\n        \"position\": &#123;\n          \"start\": &#123;\n            \"line\": 2,\n            \"column\": 7\n          &#125;,\n          \"end\": &#123;\n            \"line\": 5,\n            \"column\": 8\n          &#125;,\n          \"source\": undefined\n        &#125;\n      &#125;\n    ],\n    \"parsingErrors\": []\n  &#125;\n&#125;Copy\n\n\n\n\n\n\n\n\n\n\n这里还有一个问题需要我们注意的，像 body div #myId 这种带有空格的标签选择器，是不会逐个给我们单独分析出来的，所以这种我们是需要在后面自己逐个分解分析。除非是 , 逗号分隔的选择器才会被拆解成多个 delarations。\n添加调用上一步我们收集好了 CSS 规则，这一步我们就是要找一个合适的时机把这些规则应用上。应用的时机肯定是越早越好，CSS 设计里面有一个潜规则，就是 CSS 设计会尽量保证所有的选择器都能够在 startTag 进入的时候就能被判断。\n当然，我们后面又加了一些高级的选择器之后，这个规则有了一定的松动，但是大部分的规则仍然是去遵循这个规则的，当我们 DOM 树构建到元素的 startTag 的步骤，就已经可以判断出来它能匹配那些 CSS 规则了\n\n当我们创建一个元素后，立即计算 CSS\n我们假设：理论上，当我们分析一个元素时，所有的 CSS 规则已经被收集完毕\n在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 的 emit() 函数加入 computeCSS() 函数调用\n/**\n * 输出 HTML token\n * @param &#123;*&#125; token\n */\nfunction emit(token) &#123;\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  &#x2F;&#x2F; 如果是开始标签  if (token.type &#x3D;&#x3D; ‘startTag’) &#123;    let element &#x3D; &#123;      type: ‘element’,      children: [],      attributes: [],    &#125;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName\n\n&lt;span class=&quot;token comment&quot;&gt;// 叠加标签属性&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prop &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prop &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; prop &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tagName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; prop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n      value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;prop&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token comment&quot;&gt;// 元素构建好之后直接开始 CSS 计算&lt;/span&gt;\n&lt;span class=&quot;token function&quot;&gt;computeCSS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;token comment&quot;&gt;// 对偶操作&lt;/span&gt;\ntop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\nelement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top\n&lt;span class=&quot;token comment&quot;&gt;// 自封闭标签之外，其他都入栈&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;token&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isSelfClosing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; stack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n\ncurrentTextNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;\n\n  } else if (token.type &#x3D;&#x3D; ‘endTag’) {    &#x2F;&#x2F; …………. 省略了这部分代码 …………………  } else if (token.type &#x3D;&#x3D;&#x3D; ‘text’) {    &#x2F;&#x2F; …………. 省略了这部分代码 …………………  }}Copy\n\n\n\n\n\n\n\n\n\n文件：parser.js 中加入 computeCSS() 函数\n/**\n * 对元素进行 CSS 计算\n * @param &#123;*&#125; element\n */\nfunction computeCSS(element) &#123;\n  console.log(rules)\n  console.log('compute CSS for Element', element)\n&#125;Copy\n\n获取父元素序列为什么需要获取父元素序列呢？因为我们今天的选择器大多数都是跟元素的父元素相关的。\n\n在 computeCSS 函数中，我们必须知道元素的所有父级元素才能判断元素与规则是否匹配\n我们从上一步骤的 stack，可以获取本元素的父元素\n因为我们首先获取的是 “当前元素”，所以我们获得和计算父元素匹配的顺序是从内向外\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中的 computeCSS() 函数\n\n因为栈里面的元素是会不断的变化的，所以后期元素会在栈中发生变化，就会可能被污染。所以这里我们用了一个slice来复制这个元素。\n然后我们用了 reverse() 把元素的顺序倒过来，为什么我们需要颠倒元素的顺序呢？是因为我们的标签匹配是会从当前元素开始逐级的往外匹配（也就是一级一级往父级元素去匹配的）\n\n/**\n * 对元素进行 CSS 计算\n * @param &#123;*&#125; element\n */\nfunction computeCSS(element) &#123;\n  var elements = stack.slice().reverse()\n&#125;Copy\n\n选择器与元素的匹配首先我们来了解一下选择器的机构，其实选择器其实是有一个层级结构的：\n\n最外层叫选择器列表，这个我们的 CSS parser 已经帮我们做了拆分\n选择器列表里面的，叫做复杂选择器，这个是由空格分隔了我们的复合选择器\n复杂选择器是根据亲代关系，去选择元素的\n复合选择器，是针对一个元素的本身的属性和特征的判断\n而复合原则性选择器，它又是由紧连着的一对选择器而构成的\n在我们的模拟浏览器中，我们可以假设一个复杂选择器中只包含简单选择器\n我们就把这种情况当成而外有精力的同学自行去实现了哈\n\n思路：\n\n选择器也要从当前元素向外排列\n复杂选择器拆成对单个元素的选择器，用循环匹配父级元素队列\n\n/**\n * 匹配函数下一节会重点实现\n * @param &#123;*&#125; element\n * @param &#123;*&#125; selector\n */\nfunction match(element, selector) &#123;&#125;\n\n&#x2F;**\n\n对元素进行 CSS 计算\n@param &#123;*&#125; element *&#x2F;function computeCSS(element) &#123;  var elements &#x3D; stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle &#x3D; &#123;&#125;  &#x2F;&#x2F; 这里循环 CSS 规则，让规则与元素匹配  &#x2F;&#x2F; 1.  如果当前选择器匹配不中当前元素直接 continue  &#x2F;&#x2F; 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素  &#x2F;&#x2F; 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配  for (let rule of rules) &#123;    let selectorParts &#x3D; rule.selectors[0].split(‘ ‘).reverse()\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&amp;gt;=&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matched&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Element&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;matched rule&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rule&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n\n  }}Copy\n计算选择器与元素上一节我们没有完成 match 匹配函数的实现，那这一部分我们来一起实现元素与选择器的匹配逻辑。\n\n根据选择器的类型和元素属性，计算是否与当前元素匹配\n这里仅仅实现了三种基本选择器，实际的浏览器中要处理复合选择器\n同学们可以自己尝试一下实现复合选择器，实现支持空格的 Class 选择器\n\n/**\n * 匹配元素和选择器\n * @param &#123;Object&#125; element 当前元素\n * @param &#123;String&#125; selector CSS 选择器\n */\nfunction match(element, selector) &#123;\n  if (!selector || !element.attributes) return false\n\n  if (selector.charAt(0) &#x3D;&#x3D;&#x3D; ‘#’) &#123;    let attr &#x3D; element.attributes.filter((attr) &#x3D;&gt; attr.name &#x3D;&#x3D;&#x3D; ‘id’)[0]    if (attr &amp;&amp; attr.value &#x3D;&#x3D;&#x3D; selector.replace(‘#’, ‘’)) return true  &#125; else if (selector.charAt(0) &#x3D;&#x3D;&#x3D; ‘.’) &#123;    let attr &#x3D; element.attributes.filter((attr) &#x3D;&gt; attr.name &#x3D;&#x3D;&#x3D; ‘class’)[0]    if (attr &amp;&amp; attr.value &#x3D;&#x3D;&#x3D; selector.replace(‘.’, ‘’)) return true  &#125; else &#123;    if (element.tagName &#x3D;&#x3D;&#x3D; selector) return true  &#125;\n  return false&#125;Copy\n生成 computed 属性这一部分我们生成 computed 属性，这里我们只需要把 delarations 里面声明的属性给他加到我们的元素的 computed 上就可以了。\n\n一旦选择器匹配中了，就把选择器中的属性应用到元素上\n然后形成 computedStyle\n\n/**\n * 对元素进行 CSS 计算\n * @param &#123;*&#125; element\n */\nfunction computeCSS(element) &#123;\n  var elements = stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle &#x3D; &#123;&#125;  &#x2F;&#x2F; 这里循环 CSS 规则，让规则与元素匹配  &#x2F;&#x2F; 1. 如果当前选择器匹配不中当前元素直接 continue  &#x2F;&#x2F; 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素  &#x2F;&#x2F; 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配  for (let rule of rules) &#123;    let selectorParts &#x3D; rule.selectors[0].split(‘ ‘).reverse()\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&amp;gt;=&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matched&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; computedStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;computedStyle\n  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; declaration &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; rule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;declarations&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n    computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value\n  &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computedStyle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n  }}Copy\n\n\n\n\n\n\n\n\n\n看完代码的同学，或者自己去实现这个代码时候的同学，应该会发现这个代码中有一个问题。如果我们回去看看我们的 HTML 代码中的 style 样式表，我们发现 HTML 中的 img 标签会被两个 CSS 选择器匹配中，分别是 body div #myId 和 body div img。这样就会导致前面匹配中后加入 computedStyle 的属性值会被后面匹配中的属性值所覆盖。但是根据 CSS 中的权重规则，ID 选择器是高于标签选择器的。这个问题我们下一部分会和同学们一起解决掉哦。\nSpecificity 的计算逻辑上一节的代码中，我们只是把匹配中的选择器中的属性直接覆盖上一个，但是其实在 CSS 里面是有一个 specification 的规定。specification 翻译成中文，很多时候都会被翻译成 优先级，当然在理论上是对的，但是在英文中呢，优先级是 priority，所以 specificity 是 专指程度。\n放在 CSS 中理解就是，ID 选择器中的专指度是会比 CLASS 选择器的高，所以 CSS 中的 ID 的属性会覆盖 CLASS 的属性。\n好我们先来理解一下 specification 是什么？\n\n首先 specifity 会有四个元素\n按照 CSS 中优先级的顺序来说就是 inline style &gt; id &gt; class &gt; tag\n所以把这个生成为 specificity 就是 [0, 0, 0, 0]\n数组里面每一个数字都是代表在样式表中出现的次数\n\n下面我们用一些例子来分析一下，我们应该如何用 specificity 来分辨优先级的：\n\n\n\n\n\n\n\n\n\nA 组选择器\nA 选择器：div div #idA 的 specification ：[0, 1, 0, 2]\n\nid 出现了一次，所以第二位数字是 1\ndiv tag 出现了两次，所以第四位数是 2\n\nB 组选择器\nB 选择器：div #my #id\nB 的 specification：[0, 2, 0, 1]\n\nid 出现了两次，所以第二位数字是 2\ndiv tag 出现了一次，所以第四位数是 1\n\n好，那么我们怎么去比较上面的两种选择器，那个更大呢？\n\n我们需要从左到右开始比对；\n遇到同位置的数值一样的，就可以直接跳过；\n直到我们找到一对数值是有不一样的，这个时候就看是哪个选择器中的数值更大，那个选择器的优先级就更高；\n只要有一对比对出大小后，后面的就不需要再比对了。\n\n用上面 A 和 B 两种选择器来做对比的话，第一对两个都是 0，所以可以直接跳过。\n然后第二位数值对，A 选择器是 1，B 选择器是 2，很明显 B 要比 A 大，所以 B 选择器中的属性就要覆盖 A 的。\n说到这里同学们应该都明白 CSS 中 specificity 的规则和对比原理了，下来我们一起来看看如何实现这个代码逻辑。\n\nCSS 规则根据 specificity 和后来优先规则覆盖\nspecificity 是个四元组，越左边权重越高\n一个 CSS 规则的 specificity 根据包含的简单选择器相加而成\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 中添加一个 specificity 函数，来计算一个选择器的 specificity\n/**\n * 计算选择器的 specificity\n * @param &#123;*&#125; selector\n */\nfunction specificity(selector) &#123;\n  let p = [0, 0, 0, 0]\n  let selectorParts = selector.split(' ')\n  for (let part of selectorParts) &#123;\n    if (part.charAt(0) === '#') &#123;\n      p[1] += 1\n    &#125; else if (part.charAt(0) === '.') &#123;\n      p[2] += 1\n    &#125; else &#123;\n      p[3] += 1\n    &#125;\n  &#125;\n  return p\n&#125;Copy\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 添加一个 compare 函数，来对比两个选择器的 specificity\n/**\n * 对比两个选择器的 specificity\n * @param &#123;*&#125; sp1\n * @param &#123;*&#125; sp2\n */\nfunction compare(sp1, sp2) &#123;\n  for (let i = 0; i &lt;= 3; i++) &#123;\n    if (i === 3) return sp1[3] - sp2[3]\n    if (sp1[i] - sp2[i]) return sp1[i] - sp2[i]\n  &#125;\n&#125;Copy\n\n\n\n\n\n\n\n\n\n\n文件：parser.js 的 computeCSS 中修改匹配中元素后的属性赋值逻辑\n/**\n * 对元素进行 CSS 计算\n * @param &#123;*&#125; element\n */\nfunction computeCSS(element) &#123;\n  var elements = stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle &#x3D; &#123;&#125;  &#x2F;&#x2F; 这里循环 CSS 规则，让规则与元素匹配  &#x2F;&#x2F; 1. 如果当前选择器匹配不中当前元素直接 continue  &#x2F;&#x2F; 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素  &#x2F;&#x2F; 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配  for (let rule of rules) &#123;    let selectorParts &#x3D; rule.selectors[0].split(‘ ‘).reverse()\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&amp;gt;=&lt;/span&gt; selectorParts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; matched &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matched&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;specificity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;selectors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; computedStyle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;computedStyle\n  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; declaration &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; rule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;declarations&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;specificity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;specificity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sp\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;\n      &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;specificity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value\n      computedStyle&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;declaration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;specificity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sp\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n  &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n\n  }}Copy\n\n最后我们这里就完成了浏览器工作原理中的 HTML 解析和 CSS 计算。\n下一篇文章我们来一起完成排版和渲染两个浏览器过程。敬请期待！\n\n推荐专栏小伙伴们可以查看或者订阅相关的专栏，从而集中阅读相关知识的文章哦。\n\n📖 《数据结构与算法》 — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。\n\n📖 《FCC 前端集训营》 — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书\n\n📖 《前端星球》 — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥\n\n\n\n\n\n\n\n","slug":"test","date":"2021-09-26T15:32:04.000Z","categories_index":"软件学堂","tags_index":"标签测试","author_index":"链桥"}]